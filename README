README

CS 51 Final Project: Fountain Codes

This is an implementation of a fountain code algorithm written in OCaml.

********************************************************************************

File Manifest
    droplet.ml    - defines the Droplet, containing a seed, the XOR'd data, and 
                    the total number of pieces
    
    fountain.ml   - defines the Fountain, produces Droplets according to the 
                    fountain code implementation chosen
    
    goblet.ml     - defines a Goblet, used to collect Droplets and reconstruct 
                    the original data. This takes a droplet (seed, the data to 
                    be decoded, and the total number of pieces)

    operations.ml - contains actual usage of our droplet, fountain, and goblet 
                    classes - hence "operations"

    string_droplet.ml,
    string_fountain.ml,
    string_goblet.ml,
    string_operations.ml - same as above, except implemented such that an 
                           arbitrary piece size can be designated when breaking 
                           up the data and building droplets

    experiment.ml        - sandbox for testing new ideas

    test_framework.ml,
    pretty_print.ml      - contain the CamelJockey testing framework

    lenna.jpg,
    lenna.png            - images for testing file I/O


OPERATING INSTRUCTIONS
To run, compile first, and then, from the command line:

./string_operations "message" piece_size max_pieces


KNOWN BUGS/INEFFICIENCIES
The math currently being used in Goblet is sub-optimal and stands to be improved
by allowing the program the recognize when it can XOR immediately, instead of
waiting for a droplet containing a single piece of data. 

Duplicate pieces may appear in a single droplet. These duplicate do not provide
any additional information.

When you designated a piece size larger than the input message, spaces will be
added to your message until it divides evenly by the piece size you have given.
This also happens any time the message does not divide cleanly by the piece
size given. This is expected behavior, but can be improved.

Contact Information
    Renzo Lucioni   : renzolucioni@gmail.com
    Vipul Shekhawat : vish092@gmail.com
    Danny Broudy    : daniel.broudy@gmail.com
    Peregrine Badger: pbadger@college.harvard.edu
