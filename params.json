{"name":"Fountain-codes","body":"###CS 51 Final Project: Fountain Codes\r\n\r\nThis is an implementation of the LT fountain code algorithm written in OCaml.\r\n\r\n********************************************************************************\r\n\r\n### File Manifest\r\n    droplet.ml    - defines the Droplet, containing a seed, the XOR'd data, and \r\n                    the total number of pieces\r\n    \r\n    fountain.ml   - defines the Fountain, produces Droplets according to the \r\n                    fountain code implementation chosen\r\n    \r\n    goblet.ml     - defines a Goblet, used to collect Droplets and reconstruct \r\n                    the original data. This takes a droplet (seed, the data to \r\n                    be decoded, and the total number of pieces)\r\n\r\n    operations.ml - contains actual usage of our droplet, fountain, and goblet \r\n                    classes - hence \"operations\"\r\n\r\n    string_droplet.ml,\r\n    string_fountain.ml,\r\n    string_goblet.ml,\r\n    string_operations.ml - same as above, except implemented such that an \r\n                           arbitrary piece size can be designated when breaking \r\n                           up the data and building droplets\r\n\r\n    io_operations.ml     - similar to other operations files, this file allows\r\n                           encoding and decoding of an arbitrary file\r\n\r\n    copier.ml            - a test of OCaml's I/O features; used to create a \r\n                           copy of a file whose name is hardcoded in a hardcoded\r\n                           destination\r\n\r\n    imagecp.jpg          - a dump for copier.ml; useful in testing\r\n\r\n    experiment.ml        - sandbox for testing new ideas\r\n\r\n    lenna.jpg,\r\n    lenna.png            - images for testing file I/O\r\n\r\n    test_framework.ml,\r\n    pretty_print.ml      - contain the CamelJockey testing framework\r\n\r\n\r\n\r\n### Operating Instructions\r\nTo run, compile first, and then, from the command line:\r\n\r\n```\r\n./string_operations \"message\" piece_size max_pieces\r\n```\r\n\r\n### Known Bugs and Inefficiencies\r\nio_operations compiles but overflows upon execution\r\n\r\nThe math currently being used in Goblet is sub-optimal and stands to be improved\r\nby allowing the program the recognize when it can XOR immediately, instead of\r\nwaiting for a droplet containing a single piece of data. \r\n\r\nDuplicate pieces may appear in a single droplet. These duplicate do not provide\r\nany additional information.\r\n\r\nWhen you designated a piece size larger than the input message, spaces will be\r\nadded to your message until it divides evenly by the piece size you have given.\r\nThis also happens any time the message does not divide cleanly by the piece\r\nsize given. This is expected behavior, but can be improved.\r\n\r\n### Contact Information\r\n    Renzo Lucioni   : renzolucioni@gmail.com\r\n    Vipul Shekhawat : vish092@gmail.com\r\n    Danny Broudy    : daniel.broudy@gmail.com\r\n    Peregrine Badger: pbadger@college.harvard.edu\r\n","tagline":"CS 51 Final Project (Spring 2012)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}